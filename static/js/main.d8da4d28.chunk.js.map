{"version":3,"sources":["components/TodoItems.js","components/TodoElement/TodoElement.js","components/TodoWrapper/TodoWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItems","text","id","TodoElement","props","className","task","onClick","deleteTask","TodoWrapper","useState","Text","setText","Tasks","setTasks","Id","setId","newTasks","filter","type","value","onChange","e","target","placeholder","preventDefault","concat","handleSubmit","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAWeA,G,MAXG,CACd,CACIC,KAAM,gBACNC,GAAI,GAER,CACID,KAAM,cACNC,GAAI,K,eCMGC,EAXK,SAACC,GAEjB,OACI,sBAAKC,UAAU,cAAf,UACI,mBAAGA,UAAY,WAAf,SAA2BD,EAAME,KAAKL,OACtC,wBAAQI,UAAU,UAAUE,QAAW,kBAAMH,EAAMI,WAAWJ,EAAME,KAAKJ,KAAzE,mBCmCGO,EArCK,SAACL,GACjB,MAAwBM,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA0BF,mBAASV,GAAnC,mBAAOa,EAAP,KAAcC,EAAd,KAEA,EAAoBJ,mBAAS,GAA7B,mBAAOK,EAAP,KAAWC,EAAX,KASMR,EAAa,SAACN,GAChB,IAAMe,EAAWJ,EAAMK,QAAO,SAACZ,GAC3B,OAAOA,EAAKJ,KAAOA,KAEvBY,EAASG,IAIb,OACI,qBAAKZ,UAAY,cAAjB,SACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,cAAf,UACI,uBAAOc,KAAK,OAAOd,UAAU,YAAYe,MAAST,EAAMU,SAAY,SAACC,GAAD,OAAOV,EAAQU,EAAEC,OAAOH,QAAQI,YAAc,4BAClH,wBAAQnB,UAAU,aAAaE,QAAW,SAACe,GAAD,OApBrC,SAACA,GAClBA,EAAEG,iBACFX,EAASD,EAAMa,OAAO,CAACzB,KAAMU,EAAMT,GAAIa,KACvCC,EAAMD,EAAK,GACXH,EAAQ,IAgBqDe,CAAaL,IAA9D,oBAEHT,EAAMe,KAAI,SAACtB,GAAD,OAAU,cAAC,EAAD,CAA6BA,KAAQA,EAAME,WAAcA,GAArCF,EAAKJ,aCrB/C2B,G,MARH,WAGV,OACI,cAAC,EAAD,MCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8da4d28.chunk.js","sourcesContent":["const TodoItems = [\n    {\n        text: \"Watch a movie\",\n        id: 0,\n    },\n    {\n        text: \"Do homework\",\n        id: 1,\n    },\n]\n\nexport default TodoItems","import './TodoElement.css'\n\nconst TodoElement = (props) => {\n\n    return (\n        <div className=\"todoElement\">\n            <p className = \"taskText\">{props.task.text}</p>\n            <button className=\"delTask\" onClick = {() => props.deleteTask(props.task.id)}>X</button>\n        </div>\n    )\n}\n\n\nexport default TodoElement","import React, {useState} from 'react'\nimport './todoWrapper.css'\nimport TodoItems from '../TodoItems'\nimport TodoElement from '../TodoElement/TodoElement'\n\nconst TodoWrapper = (props) => {\n    const [Text, setText] = useState('')\n\n    const [Tasks, setTasks] = useState(TodoItems)\n\n    const [Id, setId] = useState(2)\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        setTasks(Tasks.concat({text: Text, id: Id}))\n        setId(Id + 1)\n        setText('')\n    }\n\n    const deleteTask = (id) => {\n        const newTasks = Tasks.filter((task) => {\n            return task.id !== id \n        })\n        setTasks(newTasks)\n\n    }\n\n    return (\n        <div className = \"todoWrapper\">\n            <div className=\"todoInner\">\n                <div className=\"formWrapper\">\n                    <input type=\"text\" className=\"todoInput\" value = {Text} onChange = {(e) => setText(e.target.value)} placeholder = \"What do you want to do?\"/>\n                    <button className=\"todoSubmit\" onClick = {(e) => handleSubmit(e)}>Add</button>\n                </div>\n                {Tasks.map((task) => <TodoElement key = {task.id} task = {task} deleteTask = {deleteTask}/>)}\n            </div>\n        </div>\n    )\n    \n}\n\n\nexport default TodoWrapper","import React from 'react'\nimport TodoWrapper from './components/TodoWrapper/TodoWrapper';\nimport './App.css'\n\n\nconst App = () => {\n\n\n  return (\n      <TodoWrapper/>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}